#!/usr/bin/env python3
"""
Ejemplo de Integraci√≥n del Sistema de Limpieza y Enriquecimiento de Direcciones

Este script demuestra c√≥mo integrar el nuevo sistema con las herramientas existentes
de geocodificaci√≥n reversa.
"""

import os
import sys
import pandas as pd
from typing import List, Dict

# A√±adir el directorio del batch processor al path
current_dir = os.path.dirname(os.path.abspath(__file__))
batch_processor_path = os.path.join(current_dir, 'reverse_geocoding_batch_processor')
sys.path.append(batch_processor_path)

from address_enhancer import AddressEnhancer

def create_sample_data() -> List[Dict]:
    """
    Crea datos de ejemplo que representan casos reales de uso
    """
    return [
        # Direcciones incompletas
        {'id': 1, 'address': 'Gran V√≠a 25', 'city': 'Madrid'},
        {'id': 2, 'address': 'c/ mayor 15', 'postal_code': '28013'},
        
        # Direcciones con errores de tipeo
        {'id': 3, 'address': 'callle reforma 123', 'city': 'Mexico DF'},
        {'id': 4, 'address': 'avendia insurgentes 456'},
        
        # Direcciones con coordenadas pero sin formato est√°ndar
        {'id': 5, 'address': 'cerca del centro', 'lat': 41.4036, 'lng': 2.1744},
        
        # Direcciones en diferentes idiomas
        {'id': 6, 'address': '123 main st', 'city': 'New York'},
        {'id': 7, 'address': 'champs elysees', 'city': 'Paris'},
        
        # Direcciones muy incompletas
        {'id': 8, 'address': 'Barcelona'},
        {'id': 9, 'address': 'Madrid centro'},
        
        # üÜï Direcciones con caracteres especiales
        {'id': 10, 'address': 'Sagrada Fam√≠lia!!! @Barcelona (Espa√±a)', 'postal_code': '123'},
        {'id': 11, 'address': 'Av. Insurgentes #1234 <Colonia Roma>'},
        {'id': 12, 'address': 'R√∫a Jos√© Garc√≠a L√≥pez, 42 ~Coru√±a~'}
    ]

def demonstrate_individual_features(enhancer: AddressEnhancer):
    """
    Demuestra cada funcionalidad del sistema individualmente
    """
    print("="*60)
    print("DEMOSTRACI√ìN DE FUNCIONALIDADES INDIVIDUALES")
    print("="*60)
    
    # 1. Detecci√≥n de direcciones incompletas
    print("\n1. üîç DETECCI√ìN DE DIRECCIONES INCOMPLETAS")
    print("-" * 50)
    
    test_addresses = ["Gran V√≠a 25", "123 Main Street, Madrid, 28013", "Barcelona"]
    for addr in test_addresses:
        analysis = enhancer.detect_incomplete_address(addr)
        print(f"'{addr}'")
        print(f"  Completa: {analysis['is_complete']} (Confianza: {analysis['confidence']:.2f})")
        print(f"  Faltantes: {analysis['missing_components']}")
        print()
    
    # 2. Normalizaci√≥n de direcciones
    print("2. ‚ú® NORMALIZACI√ìN DE DIRECCIONES")
    print("-" * 50)
    
    normalize_examples = [
        "c/ gran via 25",
        "av. insurgentes sur 1234", 
        "123 main st",
        "pl. mayor 15"
    ]
    
    for addr in normalize_examples:
        normalized_es = enhancer.normalize_address_format(addr, 'es')
        normalized_en = enhancer.normalize_address_format(addr, 'en')
        print(f"Original: '{addr}'")
        print(f"  Espa√±ol: '{normalized_es}'")
        print(f"  English: '{normalized_en}'")
        print()
    
    # 3. Sugerencias de correcci√≥n
    print("3. üîß SUGERENCIAS DE CORRECCI√ìN")
    print("-" * 50)
    
    error_examples = ["callle mayor 25", "avendia reforma", "123 main stret"]
    for addr in error_examples:
        suggestions = enhancer.suggest_address_corrections(addr)
        print(f"'{addr}' ‚Üí {suggestions}")
    print()
    
    # 4. Validaci√≥n de c√≥digos postales
    print("4. ‚úÖ VALIDACI√ìN DE C√ìDIGOS POSTALES")
    print("-" * 50)
    
    postal_examples = [
        ("28013", "ES"), ("12345", "US"), ("K1A 0A9", "CA"), ("123", "ES")
    ]
    
    for postal, country in postal_examples:
        validation = enhancer.validate_postal_code(postal, country)
        print(f"{postal} ({country}): {'‚úÖ' if validation['is_valid'] else '‚ùå'}")
    print()
    
    # 5. üÜï Limpieza de caracteres especiales
    print("5. üßΩ LIMPIEZA DE CARACTERES ESPECIALES")
    print("-" * 50)
    
    from reverse_geocoding_batch_processor.address_enhancer import clean_address_text
    
    special_char_examples = [
        "Calle Mayor!!! @Madrid (Espa√±a)",
        "Av. Insurgentes #1234 <M√©xico>",
        "R√∫a Jos√© Garc√≠a L√≥pez, 42 ~Coru√±a~"
    ]
    
    for addr in special_char_examples:
        clean_conservative = clean_address_text(addr, aggressive=False)
        clean_aggressive = clean_address_text(addr, aggressive=True)
        print(f"Original:      '{addr}'")
        print(f"Conservadora:  '{clean_conservative}'")
        print(f"Agresiva:      '{clean_aggressive}'")
        print()

def demonstrate_batch_processing(enhancer: AddressEnhancer):
    """
    Demuestra el procesamiento en lote completo
    """
    print("="*60)
    print("DEMOSTRACI√ìN DE PROCESAMIENTO EN LOTE")
    print("="*60)
    
    # Crear datos de muestra
    sample_data = create_sample_data()
    
    print(f"\nüìã Procesando {len(sample_data)} direcciones de ejemplo...")
    print("\nDatos de entrada:")
    df_input = pd.DataFrame(sample_data)
    print(df_input[['id', 'address']].to_string(index=False))
    
    # Procesar en lote
    print(f"\n‚öôÔ∏è Iniciando procesamiento...")
    enhanced_addresses = enhancer.process_address_batch(
        sample_data, 
        delay=0.5,  # Delay corto para demo
        language='es',
        clean_special_chars=True,  # üÜï Activar limpieza de caracteres especiales
        aggressive=False  # üÜï Usar limpieza conservadora
    )
    
    print(f"\nüßΩ Procesamiento incluye limpieza conservadora de caracteres especiales")
    
    # Mostrar resultados
    print(f"\nüìä RESULTADOS DEL PROCESAMIENTO:")
    print("-" * 50)
    
    for addr in enhanced_addresses:
        print(f"ID {addr['id']}:")
        print(f"  Original: {addr.get('address', 'N/A')}")
        print(f"  Completada: {addr.get('completed_address', 'N/A')}")
        print(f"  Normalizada: {addr.get('normalized_address', 'N/A')}")
        print(f"  M√©todo: {addr.get('method_used', 'N/A')}")
        
        if 'quality_metrics' in addr:
            metrics = addr['quality_metrics']
            print(f"  Calidad: {metrics['completeness_score']:.2f}")
        
        if 'coordinates' in addr:
            coords = addr['coordinates']
            print(f"  Coordenadas: ({coords['lat']:.4f}, {coords['lng']:.4f})")
        
        if 'administrative_levels' in addr:
            admin = addr['administrative_levels']
            print(f"  Ubicaci√≥n: {admin.get('city', 'N/A')}, {admin.get('country', 'N/A')}")
        
        print()
    
    return enhanced_addresses

def demonstrate_cleaning_options(enhancer: AddressEnhancer):
    """
    Demuestra espec√≠ficamente las opciones de limpieza de caracteres especiales
    """
    print("="*60)
    print("DEMOSTRACI√ìN DE OPCIONES DE LIMPIEZA")
    print("="*60)
    
    # Datos de prueba con caracteres especiales
    test_data = [
        {'id': 1, 'address': 'Calle Mayor!!! @Madrid (Espa√±a)'},
        {'id': 2, 'address': 'Av. Insurgentes #1234 <M√©xico>'},
        {'id': 3, 'address': 'R√∫a Jos√© Garc√≠a L√≥pez, 42 ~Coru√±a~'}
    ]
    
    print("Datos de prueba:")
    for item in test_data:
        print(f"  {item['id']}. '{item['address']}'")
    
    # Procesamiento SIN limpieza
    print(f"\nüîç PROCESAMIENTO SIN LIMPIEZA:")
    print("-" * 40)
    no_clean = enhancer.process_address_batch(
        test_data.copy(), delay=0.2, language='es', 
        clean_special_chars=False
    )
    for addr in no_clean:
        print(f"  {addr['id']}. '{addr.get('completed_address', addr.get('address', 'N/A'))}'")
    
    # Procesamiento CON limpieza conservadora
    print(f"\nüßΩ PROCESAMIENTO CON LIMPIEZA CONSERVADORA:")
    print("-" * 40)
    conservative_clean = enhancer.process_address_batch(
        test_data.copy(), delay=0.2, language='es', 
        clean_special_chars=True, aggressive=False
    )
    for addr in conservative_clean:
        print(f"  {addr['id']}. '{addr.get('completed_address', addr.get('address', 'N/A'))}'")
    
    # Procesamiento CON limpieza agresiva
    print(f"\nüî• PROCESAMIENTO CON LIMPIEZA AGRESIVA:")
    print("-" * 40)
    aggressive_clean = enhancer.process_address_batch(
        test_data.copy(), delay=0.2, language='es', 
        clean_special_chars=True, aggressive=True
    )
    for addr in aggressive_clean:
        print(f"  {addr['id']}. '{addr.get('completed_address', addr.get('address', 'N/A'))}'")
    
    print(f"\nüìù OBSERVACIONES:")
    print("  ‚Ä¢ Sin limpieza: Se preservan todos los caracteres especiales")
    print("  ‚Ä¢ Conservadora: Se eliminan s√≠mbolos (!, @, #, <>, ~) pero se mantienen acentos")
    print("  ‚Ä¢ Agresiva: Se eliminan s√≠mbolos Y acentos para compatibilidad con sistemas legacy")

def demonstrate_integration_with_existing_tools(enhancer: AddressEnhancer):
    """
    Demuestra c√≥mo el nuevo sistema se integra con las herramientas existentes
    """
    print("="*60)
    print("INTEGRACI√ìN CON HERRAMIENTAS EXISTENTES")
    print("="*60)
    
    # Simular datos del sistema de geocodificaci√≥n reversa existente
    existing_reverse_geocoding_results = [
        {
            'latitude': 40.4168,
            'longitude': -3.7038,
            'address': 'Madrid, Espa√±a',
            'city': 'Madrid',
            'country': 'Espa√±a'
        },
        {
            'latitude': 41.4036,
            'longitude': 2.1744,
            'address': 'Barcelona, Espa√±a', 
            'city': 'Barcelona',
            'country': 'Espa√±a'
        }
    ]
    
    print("\nüîÑ Enriqueciendo resultados de geocodificaci√≥n reversa existente...")
    
    for i, result in enumerate(existing_reverse_geocoding_results, 1):
        print(f"\n--- Resultado {i} ---")
        print(f"Datos originales: {result}")
        
        # Enriquecer usando el nuevo sistema
        coordinates = (result['latitude'], result['longitude'])
        enriched = enhancer.enrich_location_data(result, coordinates)
        
        print(f"\nDatos enriquecidos a√±adidos:")
        if 'timezone' in enriched:
            print(f"  Zona horaria: {enriched['timezone']['name']}")
        
        if 'geographic_info' in enriched:
            geo = enriched['geographic_info']
            print(f"  C√≥digo postal: {geo.get('postcode', 'N/A')}")
            print(f"  Continente: {geo.get('continent', 'N/A')}")
            print(f"  Moneda: {geo.get('currency', {}).get('name', 'N/A')}")
        
        if 'administrative_levels' in enriched:
            admin = enriched['administrative_levels']
            print(f"  Provincia: {admin.get('state', 'N/A')}")
            print(f"  Barrio: {admin.get('neighbourhood', 'N/A')}")

def export_results_demonstration(enhancer: AddressEnhancer, addresses: List[Dict]):
    """
    Demuestra las opciones de exportaci√≥n
    """
    print("="*60)
    print("DEMOSTRACI√ìN DE EXPORTACI√ìN")
    print("="*60)
    
    # Exportar a CSV
    csv_file = 'demo_enhanced_addresses.csv'
    enhancer.export_enhanced_addresses(addresses, csv_file, 'csv')
    
    print(f"\nüìÑ Exportado a CSV: {csv_file}")
    
    # Mostrar estad√≠sticas del archivo CSV
    df = pd.read_csv(csv_file)
    print(f"  Filas: {len(df)}")
    print(f"  Columnas: {len(df.columns)}")
    print(f"  Primeras 5 columnas: {list(df.columns[:5])}")
    
    # Exportar a JSON
    json_file = 'demo_enhanced_addresses.json'
    enhancer.export_enhanced_addresses(addresses, json_file, 'json')
    
    print(f"\nüìã Exportado a JSON: {json_file}")
    
    # Mostrar tama√±o de archivos
    csv_size = os.path.getsize(csv_file)
    json_size = os.path.getsize(json_file)
    
    print(f"  Tama√±o CSV: {csv_size:,} bytes")
    print(f"  Tama√±o JSON: {json_size:,} bytes")

def main():
    """
    Funci√≥n principal que ejecuta todas las demostraciones
    """
    print("üöÄ DEMOSTRACI√ìN COMPLETA DEL SISTEMA DE LIMPIEZA Y ENRIQUECIMIENTO")
    print("üîó Integrado con OpenCage Geocoding API")
    print()
    
    try:
        # Inicializar el enhancer
        print("‚öôÔ∏è Inicializando AddressEnhancer...")
        enhancer = AddressEnhancer()
        print("‚úÖ Sistema inicializado correctamente")
        
        # Ejecutar demostraciones
        demonstrate_individual_features(enhancer)
        enhanced_addresses = demonstrate_batch_processing(enhancer)
        demonstrate_cleaning_options(enhancer)  # üÜï Nueva demostraci√≥n
        demonstrate_integration_with_existing_tools(enhancer)
        export_results_demonstration(enhancer, enhanced_addresses)
        
        print("\n" + "="*60)
        print("üéâ ¬°DEMOSTRACI√ìN COMPLETADA EXITOSAMENTE!")
        print("="*60)
        print("\nüìö Para m√°s ejemplos interactivos, abre:")
        print("   address_enhancement_demo.ipynb")
        print("\nüîß Para usar desde l√≠nea de comandos:")
        print("   python reverse_geocoding_batch_processor/address_enhancer.py input.csv -o output.csv")
        print("\nüíª Para uso program√°tico, importa:")
        print("   from reverse_geocoding_batch_processor.address_enhancer import AddressEnhancer")
        
    except Exception as e:
        print(f"‚ùå Error durante la demostraci√≥n: {e}")
        print("\nüîç Verifica que:")
        print("   1. El archivo .env existe con tu OPENCAGE_API_KEY")
        print("   2. Las dependencias est√°n instaladas (ejecuta install_dependencies.py)")
        print("   3. Tienes conexi√≥n a internet")

if __name__ == "__main__":
    main()
